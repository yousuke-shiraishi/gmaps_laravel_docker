name: 'User Management'
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: api/users
    metadata:
      groupName: 'User Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: ユーザー一覧を取得
      description: ''
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          [
            {
              "id": 1,
              "name": "Yosuke Shiraishi",
              "email": "yosuke@example.com"
            }
          ]
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/users
    metadata:
      groupName: 'User Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: ユーザー登録
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 名前
        required: true
        example: 'Yosuke Shiraishi'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      username:
        name: username
        description: ユーザー名（ログインに使用）
        required: true
        example: yosuke
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: メールアドレス
        required: true
        example: yosuke@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: パスワード（8文字以上）
        required: true
        example: password123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      birth:
        name: birth
        description: 生年月日（YYYY-MM-DD）
        required: true
        example: '1980-01-01'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      name: 'Yosuke Shiraishi'
      username: yosuke
      email: yosuke@example.com
      password: password123
      birth: '1980-01-01'
    fileParameters: []
    responses:
      -
        status: 201
        content: |-
          {
            "message": "Userの生成が成功",
            "token": "jwt.token.here",
            "user": {
              "id": 1,
              "name": "Yosuke Shiraishi",
              "username": "yosuke",
              "email": "yosuke@example.com",
              "birth": "1980-01-01"
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/users/{id}'
    metadata:
      groupName: 'User Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 指定したユーザー情報を取得
      description: ''
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: ユーザーID
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "id": 1,
            "name": "Yosuke Shiraishi",
            "email": "yosuke@example.com"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
      - PATCH
    uri: 'api/users/{id}'
    metadata:
      groupName: 'User Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: ユーザー情報を更新
      description: ''
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: ユーザーID
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 名前
        required: false
        example: 'Yosuke Updated'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      username:
        name: username
        description: ユーザー名
        required: false
        example: yosuke-updated
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: メールアドレス
        required: false
        example: yosuke-updated@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: 新しいパスワード
        required: false
        example: newpass123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      birth:
        name: birth
        description: 生年月日（YYYY-MM-DD）
        required: false
        example: '1981-01-01'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      name: 'Yosuke Updated'
      username: yosuke-updated
      email: yosuke-updated@example.com
      password: newpass123
      birth: '1981-01-01'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "id": 1,
            "name": "Yosuke Updated",
            "email": "yosuke-updated@example.com"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/users/{id}'
    metadata:
      groupName: 'User Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: ユーザーを削除
      description: ''
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: ユーザーID
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "User削除"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
